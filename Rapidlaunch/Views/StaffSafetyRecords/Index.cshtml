@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@model IEnumerable<Rapidlaunch.Models.StaffSafetyRecord>

@{
    ViewData["Title"] = "Index";
}
<!-- checks if user is signed in -->
@if (SignInManager.IsSignedIn(User))
{
    <h1>Staff Safety Records</h1>

    <p>
        <a asp-action="Create">Create New</a>
    </p>
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Staff)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.SafetyRating)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Staff.staffID)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.SafetyRating.safetyRatingID)
                    </td>
                    <td>
                        @Html.ActionLink("Details", "Details", new { id = item.staffID, id2 = item.safetyRatingID }) |
                        @Html.ActionLink("Delete", "Delete", new { id = item.staffID, id2 = item.safetyRatingID })
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

else
{
    <div class="row">
        <div class="col-md-4">
            <h1>You are not authorised to view this content - <br />Please log in.</h1>
            <br /><a class="btn btn-danger" asp-area="identity" asp-page="/Account/Login">Login</a>
        </div>
    </div>
}
<!-- checks if user is signed in - giving a sign in alternative -->